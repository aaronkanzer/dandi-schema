name: Tests

on:
  push:
  pull_request:
  schedule:
    - cron: '0 6 * * *'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    env:
      NO_ET: 1

    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019
          - ubuntu-18.04
          - macos-latest
        python:
          - 3.7
          - 3.8
          - 3.9
        dandi_api:
          - false
        dev_deps:
          - false
        include:
          - os: ubuntu-18.04
            python: 3.7
            dandi_api: true
            dev_deps: false
          - os: ubuntu-18.04
            python: 3.7
            dandi_api: false
            dev_deps: true
        exclude:
          # Temporarily disabled due to h5py/hdf5 dependency issue
          # See <https://github.com/dandi/dandi-cli/pull/315>
          - os: windows-2019
            python: 3.9

    steps:
    - name: Set up environment
      uses: actions/checkout@v1
      with:
        # Fetch all commits so that versioneer will return something compatible
        # with semantic-version
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - name: Install hdf5 (Ubuntu)
      if: matrix.python == '3.9' && startsWith(matrix.os, 'ubuntu')
      run: sudo apt-get update && sudo apt-get install -y libhdf5-dev

    - name: Install hdf5 (macOS)
      if: matrix.python == '3.9' && startsWith(matrix.os, 'macos')
      run: |
        brew install hdf5@1.8
        brew link hdf5@1.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install ".[test]"

    - name: Install dev version of pynwb
      if: ${{ matrix.dev_deps }}
      run: |
        pip install git+https://github.com/NeurodataWithoutBorders/pynwb

    - name: Run all tests
      if: "!matrix.dandi_api"
      run: |
        python -m pytest -s -v --cov=dandi --cov-report=xml dandi

    - name: Run Dandi API tests only
      if: matrix.dandi_api
      run: |
        python -m pytest -s -v --cov=dandi --cov-report=xml --dandi-api dandi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        # name: codecov-umbrella
        # yml: ./codecov.yml
        fail_ci_if_error: false
